{
  "notices": [
    {
      "title": "ECR: Cannot use Fn::ImportValue to create repository URI.",
      "issueNumber": 32238,
      "overview": "When using Fn::ImportValue to create a repository URI, the error message 'Template error: Cannot use Fn::ImportValue in Conditions' is thrown.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_ecr.Repository",
          "version": ">=2.167.0 <=2.169.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "cli: commands fail with authentication error 'The security token included in the request is invalid'",
      "issueNumber": 32120,
      "overview": "When using IAM user credentials, or when the region is defined in `~/.aws/credentials` but not `~/.aws/config`, the CLI is unable to authenticate and to determine the AWS account and region to be used.",
      "components": [
        {
          "name": "cli",
          "version": "2.167.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "cli: cross-account deployments are failing with error 'Need to perform AWS calls for account'",
      "issueNumber": 31845,
      "overview": "A new check for the bootstrap version used by a stack was introduced. This check runs with incorrect credentials, causing all cross-account deployments to fail.",
      "components": [
        {
          "name": "cli",
          "version": "2.163.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "cli: import fails with with 'S3 error: Access Denied'",
      "issueNumber": 31716,
      "overview": "When using cdk import, the command tries to read a template that doesn't exist from the assets bucket.",
      "components": [
        {
          "name": "cli",
          "version": ">=2.161.0 <=2.162.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "stepfunctions-tasks: BedrockInvokeModel outputPath no longer passes output to next state",
      "issueNumber": 31302,
      "overview": "Previously, the BedrockInvokeModel outputPath parameter could be used to select a portion of the model output to pass to the next state. Now, the outputPath parameter is assumed to be an S3Uri where the model output should be saved. The parameter can no longer be used to select model output and pass it to the next state.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_stepfunctions_tasks.BedrockInvokeModel",
          "version": ">=v2.150.0 <=v2.155.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "core: Stack crossRegionReferences and CfnJson fail with 'Error: Cannot find module'",
      "issueNumber": 28465,
      "overview": "Enabling the experimental crossRegionReferences on a Stack or using the core.CfnJson construct causes app synthesis to fail with \"Error: Cannot find module '../dist/core/<file>.generated'\" because the files are missing from the faulty release. If you are not using either of the two features, you will not be affected by this.",
      "components": [
        {
          "name": "aws-cdk-lib.CfnJson",
          "version": "2.116.0"
        },
        {
          "name": "aws-cdk-lib.custom_resources.Provider",
          "version": "2.116.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "custom-resources: `INACTIVE` custom resource provider lambda throws `functionActiveV2 is not found`",
      "issueNumber": 24358,
      "overview": "If the custom resource provider Lambda becomes `INACTIVE`, the custom resource provider framework attempts to call `functionActiveV2()` to wait for the function to become active. This throws the error because the SDK installed by Lambda is at version 2.1055.0, but `functionActiveV2` does not exist until 2.1080.0.",
      "components": [
        {
          "name": "aws-cdk-lib.custom_resources.",
          "version": ">=v2.60.0 <v2.76.1"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "core: Names of deployed stacks change, requiring redeployment",
      "issueNumber": 25130,
      "overview": "The names of stacks that contain special characters (such as '-') are incorrectly sanitized. This is a breaking change to the names of stacks that have already been deployed.",
      "components": [
        {
          "name": "aws-cdk-lib.core.Stack",
          "version": ">=v2.74.0 <v2.75.1"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "aws-wafv2: The structs naming pattern changes from FooAction to Foo",
      "issueNumber": 24668,
      "overview": "The structs naming pattern changes from AllowAction, BlockAction, CaptchaAction, ChallengeAction and CountAction to Allow, Block, Captcha, Challenge and Count respectively.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_wafv2.CfnRuleGroup",
          "version": ">=v2.63.0 <v2.70.0"
        },
        {
          "name": "@aws-cdk/aws-wafv2.CfnRuleGroup",
          "version": ">=v1.192.0 <v1.198.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "triggers: Deployment of trigger functions fails with a type error",
      "issueNumber": 23407,
      "overview": "The Trigger and TriggerFunction constructs fail to deploy when upgrading.",
      "components": [
        {
          "name": "aws-cdk-lib.triggers.Trigger",
          "version": "^2.56.0 <2.61.1"
        },
        {
          "name": "aws-cdk-lib.triggers.TriggerFunction",
          "version": "^2.56.0 <2.61.1"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "aws-iam: IAM OIDC provider configures the wrong certificate thumbprint",
      "issueNumber": 8607,
      "overview": "Your application is using the iam.OpenIDConnectProvider resource, which currently configures the thumbprint of the leaf certificate instead of the root. Since leaf certificates are rotated more frequently, you are in danger of application errors next time those certificates get rotated. See the attached issue for mitigation steps and apply them as soon as possible.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_iam.OpenIdConnectProvider",
          "version": "^2.0.0 <2.51.0"
        },
        {
          "name": "@aws-cdk/aws-iam.OpenIdConnectProvider",
          "version": "^1.0.0 <1.181.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "apigateway: Unable to serialize value as aws-cdk-lib.aws_apigateway.IModel",
      "issueNumber": 21902,
      "overview": "Users of CDK in any language other than TS/JS cannot use values that return an instance of a deprecated class.",
      "components": [
        {
          "name": "framework",
          "version": ">=2.41.0 <=2.43.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "cli: cdk init produces EACCES: permission denied and does not fill the directory",
      "issueNumber": 22090,
      "overview": "The CLI is unable to initialize new apps if CDK is installed globally in a directory owned by root",
      "components": [
        {
          "name": "cli",
          "version": "2.42.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "cli: no stacks are deployed if the `--exclusively` (`-e`) flag is used",
      "issueNumber": 21661,
      "overview": "When the `--exclusively` flag is used to select stacks with dependencies, instead no stacks are deployed at all and the deployment silently no-ops.",
      "components": [
        {
          "name": "cli",
          "version": "2.38.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(aws-eks): Regression in installing Helm charts from assets",
      "issueNumber": 19179,
      "overview": "Helm charts fail to install when provided as an asset. This issue does not affect charts installed from a repository.",
      "components": [
        {
          "name": "framework",
          "version": "2.14.0"
        },
        {
          "name": "framework",
          "version": "1.146.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "You are using an unsupported version of AWS CDK",
      "issueNumber": 19836,
      "overview": "AWS CDK v1 is not supported anymore. Support requests relating to this version will be closed. Migrate to AWS CDK v2 to continue to get the latest features and fixes. Read more here: https://aws.amazon.com/blogs/devops/cdk-v1-end-of-support/",
      "components": [
        {
          "name": "framework",
          "version": "1.*"
        },
        {
          "name": "cli",
          "version": "1.*"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(aws-ec2): VPCs with SubnetType.PRIVATE cause resource destruction on versions >=v1.162.0, <=1.163.2",
      "issueNumber": 21138,
      "overview": "On upgrading to versions >=v1.162.0 & <=1.163.2 and using SubnetType.PRIVATE in a VPC subnetConfiguration, some of the VPC resources will be destroyed.",
      "components": [
        {
          "name": "framework",
          "version": ">=1.162.0 <=1.163.2"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(ecs-patterns) NLB-fronted services may cause target groups to be replaced on upgrade",
      "issueNumber": 24642,
      "overview": "Upgrading to versions >=1.141.0 or >=2.9.0 may cause target groups to be replaced when using NetworkLoadBalancedFargateService or NetworkLoadBalancedEc2Service.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_ecs_patterns.NetworkLoadBalancedFargateService",
          "version": ">=2.0.0 <2.9.0"
        },
        {
          "name": "aws-cdk-lib.aws_ecs_patterns.NetworkLoadBalancedEc2Service",
          "version": ">=2.0.0 <2.9.0"
        },
        {
          "name": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateService",
          "version": "<1.141.0"
        },
        {
          "name": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2Service",
          "version": "<1.141.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(ecs-patterns): unnecessary breaking target group port change introduced after upgrading cdk",
      "issueNumber": 19411,
      "overview": "Upgrading to versions >=1.140.0 and <=1.147.0 may cause target groups port changes which cause resource replacements",
      "components": [
        {
          "name": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2Service",
          "version": ">=1.140.0 <=1.147.0"
        },
        {
          "name": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateService",
          "version": ">=1.140.0 <=1.147.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(pipelines) CDK Pipelines role has overly permissive trust policy",
      "issueNumber": 25356,
      "overview": "A Role that is intended to be used only by the Pipeline can be assumed from other Roles in the same account.",
      "components": [
        {
          "name": "aws-cdk-lib.pipelines.CodePipeline",
          "version": ">=2.26.0 <2.77.0"
        },
        {
          "name": "@aws-cdk/pipelines.CodePipeline",
          "version": ">=1.158.0 <1.200.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(s3) Logging buckets may fail to create with 'Bucket cannot have ACLs set'",
      "issueNumber": 25358,
      "overview": "Starting April 2023, S3 buckets configured with ACLs (used for S3 access logging and CloudFront logging) need additional configuration",
      "components": [
        {
          "name": "aws-cdk-lib.aws_s3.Bucket",
          "version": "^2.0.0 <2.60.0"
        },
        {
          "name": "@aws-cdk/s3.Bucket",
          "version": "^1.0.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(eks) eks overly permissive trust policies",
      "issueNumber": 25674,
      "overview": "The default MastersRole allows any identity in the account with the appropriate sts:AssumeRole permissions to assume it.",
      "components": [
        {
          "name": "@aws-cdk/aws-eks.Cluster",
          "version": ">=1.57.0 <1.62.0"
        },
        {
          "name": "@aws-cdk/aws-eks.FargateCluster",
          "version": ">=1.57.0 <1.62.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(eks) eks overly permissive trust policies",
      "issueNumber": 25674,
      "overview": "Cluster CreationRole and default MastersRole allows any identity in the account with the appropriate sts:AssumeRole permissions to assume it.",
      "components": [
        {
          "name": "@aws-cdk/aws-eks.Cluster",
          "version": ">=1.62.0 <1.202.0"
        },
        {
          "name": "@aws-cdk/aws-eks.FargateCluster",
          "version": ">=1.62.0 <1.202.0"
        },
        {
          "name": "aws-cdk-lib.aws_eks.Cluster",
          "version": ">=2.0.0-rc.1 <2.80.0"
        },
        {
          "name": "aws-cdk-lib.aws_eks.FargateCluster",
          "version": ">=2.0.0-rc.1 <2.80.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(cli) cdk deploy fails when stacks or stages share assets",
      "issueNumber": 25714,
      "overview": "A single asset used in two stacks or stages that depend on each other causes 'cdk deploy' to exit early.",
      "components": [
        {
          "name": "cli",
          "version": ">=2.80.0 <2.83.1"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "cdk deploy fails on regions ap-southeast-4 and il-central-1",
      "issueNumber": 27189,
      "overview": "These regions don't have the AWS::CDK::Metadata resource type available yet, leading to a deployment failure. Workaround: use the --no-version-reporting flag",
      "components": [
        {
          "name": "framework",
          "version": "2.94.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "Unexpected keyword argument 'tag' when calling ContainerImage.fromEcrRepository",
      "issueNumber": 27240,
      "overview": "Renaming the 'tag' prop  to 'tagOrDigest' in ContainerImage.fromEcrRepository function introduces a breaking change in Python when using keyword parameters.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_ecs.ContainerImage",
          "version": "2.96.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "Python users using Schedule class get synth-time TypeError for mismatched types",
      "issueNumber": 27259,
      "overview": "Using the 'Schedule' class in aws-events, aws-autoscaling, aws-applicationautoscaling, aws-backup, aws-scheduler-alpha, aws-synthetics-alpha causes a TypeError for Python users.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_events.Schedule",
          "version": "2.97.0"
        },
        {
          "name": "aws-cdk-lib.aws_backup.Schedule",
          "version": "2.97.0"
        },
        {
          "name": "aws-cdk-lib.aws_autoscaling.Schedule",
          "version": "2.97.0"
        },
        {
          "name": "aws-cdk-lib.aws_applicationautoscaling.Schedule",
          "version": "2.97.0"
        },
        {
          "name": "@aws-cdk/aws-synthetics-alpha.Schedule",
          "version": "2.97.0-alpha.0"
        },
        {
          "name": "@aws-cdk/aws-scheduler-alpha.ScheduleExpression",
          "version": "2.97.0-alpha.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "Incorrect action in policy of Bucket `grantRead` method",
      "issueNumber": 27547,
      "overview": "Using the `grantRead` method on `aws-cdk-lib/aws-s3.Bucket` results in an invalid action attached to the resource policy which can cause unexpected failures when interacting with the bucket.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_s3.Bucket",
          "version": "2.101.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "Kinesis Firehose CIDR block support issue for ap-south-2, eu-central-2 and eu-south-2",
      "issueNumber": 27656,
      "overview": "Deploying or trying to synth the specific regions result in `Mapping doesn't contain top-level key` for the `@aws-cdk/aws-kinesisfirehose-alpha` module",
      "components": [
        {
          "name": "@aws-cdk/aws-kinesisfirehose-alpha.deliveryStream",
          "version": ">=v2.95.0 <v2.102.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(pipelines) step id cannot be unresolved during synthesis",
      "issueNumber": 27701,
      "overview": "Using S3Source, CodeStarConnectionSource, or CodeCommitSource with a tokenized repository name or branch name will result in a synth time error stating, 'Step id cannot be unresolved'.",
      "components": [
        {
          "name": "aws-cdk-lib.pipelines.S3Source",
          "version": "2.103.0"
        },
        {
          "name": "aws-cdk-lib.pipelines.CodeStarConnectionSource",
          "version": "2.103.0"
        },
        {
          "name": "aws-cdk-lib.pipelines.CodeCommitSource",
          "version": "2.103.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(cli) bootstrap template can result in public access for bootstrap buckets",
      "issueNumber": 27964,
      "overview": "The legacy AccessControl property was removed from the bootstrap template in aws-cdk v2.106.0. Users who remove the public access block using the public-access-block-configuration CLI flag will see bootstrapped buckets are created with public access and ACLs enabled by default.",
      "components": [
        {
          "name": "cli",
          "version": "2.106.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(elbv2) applicationLoadBalancer + imported buckets fails with \"Cannot read properties of undefined\"",
      "issueNumber": 27928,
      "overview": "A dependency on the bucket policy when using access logs was added to fix a circular dependency issue, but the bucket policy does not exist for imported buckets resulting in synth-time error.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer",
          "version": ">=2.106.0 <=2.108.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(route53) `CrossAccountZoneDelegationRecord` does not delete ols NS record on `zoneName` changed",
      "issueNumber": 21249,
      "overview": "When changing the zoneName value of the PublicHostedZone the old NS entries in the delegated zone are not removed.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_route53.CrossAccountZoneDelegationRecord",
          "version": ">=2.0.0 <=2.114.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(aws-events-targets): Using an imported DLQ with an event rule target throws an error",
      "issueNumber": 28165,
      "overview": "All users of `aws-events-targets` who created an `events.Rule` with the `SqsQueue` target and passed an imported (eg, `fromQueueArn` or `fromQueueName`) queue to the `deadLetterQueue` prop would receive an error similar to:  ```Error: Cannot assign Dead Letter Queue in region ${Token[TOKEN.35]} to the rule XYZEventRule89558AAC in region eu-west-1. Both the queue and the rule must be in the same region.```.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_events.Rule",
          "version": ">=2.110.0 <=2.115.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(aws-events): Upgrading to v2.116.0 breaks existing EventBus resources with an attached Policy.",
      "issueNumber": 28520,
      "overview": "v2.116.0 introduced the ability to create multiple event bus policies on a single event bus. To facilitate this, the logical Id was changed from \"Policy\" to the statementId. This triggers a replacement, which fails in CloudFormation because the statement ID does not change.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_events.EventBus",
          "version": ">=2.116.0 <=2.117.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(custom-resources): Upgrading to v2.116.0 causes deploy failure with Invalid Log Configuration",
      "issueNumber": 28577,
      "overview": "v2.116.0 introduced the ability to setup logging for a state machine created by the custom resource provider framework. This can lead to a deploy failure because the log group resource policy size can be exceeded.",
      "components": [
        {
          "name": "aws-cdk-lib.custom_resources.Provider",
          "version": ">=2.116.0 <=2.121.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(cli): List stack output change issue.",
      "issueNumber": 29420,
      "overview": "v2.132.0 introduced functionality to the cdk list command to display stack dependencies. This feature introduced a change that displays stack ids over displayName altering the existing list functionality",
      "components": [
        {
          "name": "cli",
          "version": "2.132.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(cli): Upgrading to v2.132.0 or v2.132.1 breaks cdk diff functionality",
      "issueNumber": 29483,
      "overview": "cdk diff functionality used to rely on assuming lookup-role. With a recent change present in v2.132.0 and v2.132.1, it is now trying to assume deploy-role with the lookup-role. This leads to an authorization error if permissions were not defined to assume deploy-role.",
      "components": [
        {
          "name": "cli",
          "version": ">=2.132.0 <=2.132.1"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(events-targets): Hardcoded AWS Partition in ECS task resource ARN",
      "issueNumber": 29610,
      "overview": "Partition in policy statement for `ecs:TagResource` action in `EcsTask` was hardcoded to `aws` instead of being resolved dynamically in v2.132.0, resulting in failure to deploy in any partition except AWS with an IAM validation failure on the partition arn.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_events.Rules",
          "version": "2.132.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(ec2): new `WindowsVersion` enum values give error on deployment, working values wrongly deprecated",
      "issueNumber": 29736,
      "overview": "The new enums suffixed with dates (i.e. `WINDOWS_SERVER_2022_ENGLISH_FULL_BASE_2024_02_14`) are not found when used in constructs that extend `GenericSSMParameterImage`, such as `WindowsImage`. The working enums were mistakenly deprecated (i.e. `WINDOWS_SERVER_2022_ENGLISH_FULL_BASE`).",
      "components": [
        {
          "name": "aws-cdk-lib.aws_ec2.WindowsVersion",
          "version": ">=2.135.0 <=2.136.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(lambda): Importing a `Function` with `fromFunctionArn` strips version or alias from ARN",
      "issueNumber": 30008,
      "overview": "Logic was added to the static `fromFunctionArn` method that removes any trailing version or alias from the specified function ARN. As a result, the `functionArn` property for `Functions` imported with `fromFunctionArn` will no longer include their version or alias.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_lambda.Function",
          "version": ">=2.138.0 <=2.139.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(cli): Upgrading to v2.142.0 errors out on cdk diff with `Cannot read properties of undefined`",
      "issueNumber": 30241,
      "overview": "A change was made to diff in CDK v2.142.0 to include changes to properties that are only present in the change set. This introduced cases where the resource type could be undefined which resulted in an error from calling 'includes' on undefined.",
      "components": [
        {
          "name": "cli",
          "version": "2.142.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(ses-actions): S3 ReceiptRule cannot be created, errors out with `Could not write to bucket`",
      "issueNumber": 30143,
      "overview": "A change was made in CDK v2.139.0 to reduce overly broad permissions allocated to SES for the S3 receipt rule action. This resulted in deployment failure where SES is unable to write to s3 bucket",
      "components": [
        {
          "name": "aws-cdk-lib.aws_ses.ReceiptRule",
          "version": ">=2.139.0 <=2.142.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(custom-resources): logApiResponseData property for AwsCustomResource is forcing unwanted updates",
      "issueNumber": 29949,
      "overview": "A new Logging class was added for AwsCustomResource in CDK v2.138.0. The logging property defaults to Logging.all() which adds logApiResponseData as true by default to the custom resource properties. As a result, an update is triggered automatically which returns an empty data object if no SDK call was configured. If you are on a CDK version >=2.138.0 or <=2.144.0 and upgrading to a CDK version >=2.145.0 you will need to set the @aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault feature flag to true to keep logApiResponseData as true by default and prevent an update event from being triggered; otherwise, you may encounter a deployment failure when upgrading",
      "components": [
        {
          "name": "aws-cdk-lib.custom_resources.",
          "version": ">=2.138.0 <=2.144.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(cloudformation-include): overrideLogicalId validation causing CfnInclude errors on Condition Ids",
      "issueNumber": 30669,
      "overview": "New validation on CloudFormation Resourses also extended to Conditions. This has caused an issue with cloudformation-include when trying to cfnInclude a cloudformation template that has defined Conditions using non-alphanumeric characters, e.g. snake case my_condition",
      "components": [
        {
          "name": "aws-cdk-lib.cloudformation_include.",
          "version": ">=2.147.0 <=2.147.1"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(lambda-nodejs): breaking change in esbuild causes import module error",
      "issueNumber": 30717,
      "overview": "ESBuild released a breaking change on version 0.22.0 that changed the default bundling behavior. `lambda-nodejs`'s `NodeJsFunction` now to fails to synthesize with the error message `Runtime.ImportModuleError: Cannot find module 'module'`. This issue exists on all CDK versions up to and including `2.147.2`. The workaround is either pin the esbuild version to ~0.21 or add `--packages=bundle` to `bundling.esbuildArgs` property (this option only works for esbuild version >= `0.22.0`).",
      "components": [
        {
          "name": "aws-cdk-lib.aws_lambda_nodejs.",
          "version": ">=2.0.0 <= 2.147.2"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(apigateway): breaking change in RestApi instances with CognitoUserPoolsAuthorizer",
      "issueNumber": 30444,
      "overview": "A change was added to the ApiGateway Method construct to only allow authorization scopes for cognito authorization type, this change broke the way to set the authorization scopes, and it will be empty if the customer does not explicitly set the `authorizationType` property while defining the API default method options, or while adding a new method. This issue introduced in CDK version `2.142.0`. The workaround is to either pin the `aws-cdk-lib` to version `2.141.0` or, to update the `RestApi` construct initialization to explicitly set the authorizationType in `defaultMethodOptions` property to COGNITO.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_apigateway.",
          "version": ">=2.142.0 <= 2.148.1"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(ecs): cpu/memory validation for fargate compatible task failed when using token",
      "issueNumber": 31106,
      "overview": "A validation was added to check if the cpu/memory combination is fargate compatible task. The validation doesn't let the tokenized value to pass through. Therefore, when using tokenized values (e.g. CfnParameter) to create Fargate compatible ECS task, the validation will fail with error message `Invalid CPU and memory combinations for FARGATE compatible task definition`. The workaound is pin CDK to an older version 2.150 or before.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_ecs.",
          "version": "2.151.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": " (bedrock): CfnDataSet is missing DataSourceConfiguration property",
      "issueNumber": 31183,
      "overview": "An automated CloudFormation schema change was added to Bedrock DataSet L1 Construct and caused DataSourceConfiguration to be removed from the L1 Construct.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_bedrock.",
          "version": "2.154.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(aws-ec2): Resolution error: Cannot find module '../../region-info/build-tools/fact-tables",
      "issueNumber": 31492,
      "overview": "A change was added to VPC to create vpc endpoints for ECR based on domain suffix with the help of partition info stored in region lib. This change caused the cdk-lib build failure for aws-ec2 module with resolution error while trying to fetch region info. The workaround is pin CDK to an older version 2.158.0 or before.",
      "components": [
        {
          "name": "aws-cdk-lib.aws_ec2.",
          "version": "2.159.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(cli): validation errors detected: Value '' at 'stackName' ",
      "issueNumber": 31654,
      "overview": "A change was added to aws-cdk-lib to introduce a new cli command feature `cdk --rollback`. This change caused an issue with nested stacks deployment in CDK app. The workaround is pin CDK to an older version 2.160.0 or before.",
      "components": [
        {
          "name": "cli",
          "version": "2.161.0"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(cli): Bootstrap stack outdated",
      "issueNumber": 31885,
      "overview": "The bootstrap stack in {resolve:ENVIRONMENTS} is outdated. We recommend at least version 21, distributed with CDK CLI 2.149.0 or higher. Please rebootstrap your environment by runing 'cdk bootstrap {resolve:ENVIRONMENTS}'",
      "components": [
        {
          "name": "bootstrap",
          "version": "<21"
        }
      ],
      "schemaVersion": "1"
    },
    {
      "title": "(cli): UnauthorizedException: Session token not found or invalid",
      "issueNumber": 32510,
      "overview": "The CLI fails when it's configured to get credentials via SSO and the region set in the profile is different from the region where the IAM Identity center was set up.",
      "components": [
        {
          "name": "cli",
          "version": "2.172.0"
        }
      ],
      "schemaVersion": "1"
    }
  ]
}
